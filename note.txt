// Rails api authentication: A guide to devise and devise-jwt integration


first you have to install rails application
cmd >> rails new asdsdf --api

-- api // mean Preconfigure a smaller stack for API-only apps


after that we have to enabling CORS
cors is an HTTP-header-based security mechanism that defines who's allowed to interact with API. CORS is built into all mordern web browsers.
cmd >> gem 'rack-cors'

you have to uncomment the following lines in your config/initializers/cors.rb after you have installed gem

Rails.application.config.middleware.insert_before 0, Rack::Cors do
  allow do
    origins "*"  # later change to the domain of the frontend app

    resource "*",
      headers: :any,
      methods: [:get, :post, :put, :patch, :delete, :options, :head],
      expose: [:Authorization]
  end
end


for the next step, we have to install the following gems

// gem 'devise'
// gem 'devise-jwt'
// gem 'jsonapi-serializer'


we sill setup devise after you install the gems with the following commend
cmd >> rails g devise:install


and also we need to the the devise that we will not use navigational formats so we have to make sure the array is empty in config/initializers/devise.rb and uncomment and edit the following lines

// config.navigational_formats = []

This will prevent devise from using flash messages which are a default feature and are not present in Rails api mode.


we also need to add the following line at the end of config/environments/development.rb

// config.action_mailer.default_url_options = { host: 'localhost', port: 3001 }

We will use port 3001 in our Rails app development and leave port 3000 for frontend.


we also have to update the port PUMA in conifg/puma.rb

// port ENV.fetch('PORT') {3001}


next, we will create devise model for the user.

cmd >> rails g devise User 


then, run the migration by executing

cmd >> rails g db:migrate


in this step, we will create controller for devise

cmd >> rails g devise:controllers users -c sessions registrations

we use the -c flag to specify a controller

for devise to know it can respond to JSON format, we need to instruct the controllers

class Users::SessionsController < Devise::SessionsController
  respond_to :json
end

class Users::RegistrationsController < Devise::RegistrationsController
  respond_to :json
end


then we must override the default routes provided by devise and add route aliases.

Rails.application.routes.draw do
  devise_for :users, path: '', path_names: {
    sign_in: 'login',
    sign_out: 'logout',
    registration: 'signup'
  },
  controllers: {
    sessions: 'users/sessions',
    registrations: 'users/registrations'
  }
end


We also need to permit the new parameters. We should add the following lines to the Application controller

class ApplicationController < ActionController::API
  before_action :configure_permitted_parameters, if: :devise_controller?

  protected

  def configure_permitted_parameters
    devise_parameter_sanitizer.permit(:sign_up, keys: %i[name])

    devise_parameter_sanitizer.permit(:account_update, keys: %i[name])
  end
end


you can also add user name for user table if you want

cmd >> rails g migration AddNameToUsers name:string

cmd >> rails db:migrate


from the step we will setup devise-jwt

devise-jwt will handle token dispatch and authentication, which doesn't come with devise out of the box.
JWTs need to be created with a secret key that is private. 
It shouldn’t be revealed to the public. When we receive a JWT from the client, we can verify it with that secret key stored on the server.
We can generate a secret by typing the following in the terminal

cmd >> bundle exec rails secret


We will then add it to the encrypted credentials file so it won’t be exposed

#VSCode 
cmd >> EDITOR='code --wait' rails credentials:edit

then we will add a new key:value in the encrypted.yml file

# Other secrets...  # Used as the base secret for Devise-JWT 
devise_jwt_secret_key: (copy and paste the generated secret here)


Inside the devise initializer, we will specify that on every login POST request it should append the JWT token to the 'Authorization' header as "Bearer + token"
when there's a successful response sent back, and on a logout DELETE request, the token should be revoked.


in config/initializers/devise.rb at the end add the following

  config.jwt do |jwt|
    jwt.secret = Rails.application.credentials.devise_jwt_secret_key!
    jwt.dispatch_requests = [
      ['POST', %r{^/login$}]
    ]
    jwt.revocation_requests = [
      ['DELETE', %r{^/logout$}]
    ]
    jwt.expiration_time = 1.day.to_i
  end

In the JWT requests, we should delimit the regex with ^ and $ to avoid unintentional matches.
We are also setting the expiration time of the token to 1 day (you can use any time limitation you want) after which the user will need to authenticate again.


devise-jwt gem offer 3 different revocation strategies. We will use the JTIMatcher method.

It needs a new string column named JTI to be added to the user. 
JTI stands for JWT ID, and it is a standard claim meant to uniquely identify a token.

to use it, we need to add the JTI column in the user model. so we must create a new migration

cmd >> rails g migration AddJtiToUsers jti:string:index:unique


And then make sure to add null: false to the add_column line and unique: true to the add_index line

the migration file should look like below

class AddJtiToUsers < ActiveRecord::Migration[7.1]
  def change
    add_column :users, :jti, :string, null: false
    add_index :users, :jti, unique: true
  end
end

after that make migration

cmd >> rails db:migrate


then we have to add the strategy to the user model and configure it to use the correct revocation strategy


class User < ApplicationRecord
  include Devise::JWT::RevocationStrategies::JTIMatcher

  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable,
         :jwt_authenticatable, jwt_revocation_strategy: self

end


Now, we will start working with jsonapi_serializer

This serializer creates JSON responses following the JSON:API convention.

we will create a serializer for the User model. 
We will call it every time we want to send user data from our API backend.

cmd >> rails g serializer user id email name

It generates a serializer with the attributes mentioned that we can later call using the following command:

cmd >> UserSerializer.new(#user).serializer_hash[:data][:attributes]

replace #user with the actual variable containing the user information.


After all the setups above, now we need to write the behavior of the app for user registration, login, and logout.
We will use some devise helper methods that tell the app what to do in different situations:

in app/controllers/users/registrations_controller.rb

class Users::RegistrationsController < Devise::RegistrationsController
  respond_to :json

  private

  def respond_with(resource, _opts = {})
    if resource.persisted?
      @token = request.env['warden-jwt_auth.token']
      headers['Authorization'] = @token

      render json: {
        status: { code: 200, message: 'Signed up successfully.',
                  token: @token,
                  data: UserSerializer.new(resource).serializable_hash[:data][:attributes] }
      }
    else
      render json: {
        status: { message: "User couldn't be created successfully. #{resource.errors.full_messages.to_sentence}" }
      }, status: :unprocessable_entity
    end
  end
end

in app/controllers/users/sessions_controller.rb

class Users::SessionsController < Devise::SessionsController
  respond_to :json

  private

  def respond_with(resource, _opt = {})
    @token = request.env['warden-jwt_auth.token']
    headers['Authorization'] = @token

    render json: {
      status: {
        code: 200, message: 'Logged in successfully.',
        token: @token,
        data: {
          user: UserSerializer.new(resource).serializable_hash[:data][:attributes]
        }
      }
    }, status: :ok
  end

  def respond_to_on_destroy
    if request.headers['Authorization'].present?
      jwt_payload = JWT.decode(request.headers['Authorization'].split.last,
                               Rails.application.credentials.devise_jwt_secret_key!).first

      current_user = User.find(jwt_payload['sub'])
    end

    if current_user
      render json: {
        status: 200,
        message: 'Logged out successfully.'
      }, status: :ok
    else
      render json: {
        status: 401,
        message: "Couldn't find an active session."
      }, status: :unauthorized
    end
  end
end


we need to enable sessions in our application configuration. 
This can be achieved by adding the following code to the config/application.rb file

class Application < Rails::Application
    # other codes

    # Enabled the session store for api_only application
    config.session_store :cookie_store, key: '_interslice_session'
    config.middleware.use ActionDispatch::Cookies
    config.middleware.use config.session_store, config.session_options
  end


